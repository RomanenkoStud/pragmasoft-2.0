---
import { getImage } from "astro:assets";

import arrowLeft from '~/assets/images/testimonials/switch-left.png';
import arrowRight from '~/assets/images/testimonials/switch-right.png';
import type { SimpleTestimonial } from "~/types";

type Props = {
  testimonials: SimpleTestimonial[];
}

const {
  testimonials = [],
} = Astro.props;

const optimizedArrowLeft = await getImage({src: arrowLeft, format: 'png'});
const optimizedArrowRight = await getImage({src: arrowRight, format: 'png'});

---
<div class="relative hidden font-secondary font-light text-[18px] italic lg:flex flex-col justify-center top-[115px] left-[25px] w-[680px]"
  style={`--pragma-arrow-left: url(${optimizedArrowLeft.src}); --pragma-arrow-right: url(${optimizedArrowRight.src});`}
  data-carousel data-carousel-auto data-carousel-timeout="3000">
  <div class="px-[25px] overflow-hidden">
    <div class="flex items-center flex-nowrap w-full duration-700" data-carousel-content>
      {
        testimonials &&
          testimonials.map(({ testimonial }, index) => (
            <div class={`flex shrink-0 px-[30px] h-auto w-full ${index === 0 ? 'current' : '' }`} data-carousel-slide>
              {testimonial && (
                <blockquote class="flex-auto">
                  <p class="text-muted">«{testimonial}»</p>
                </blockquote>
              )}
            </div>
          ))
      }
    </div>
  </div>
  <div class="absolute top-[calc(50%-(37px/2))] w-full">
    <div data-carousel-arrow="left" class="absolute cursor-pointer left-0 w-[20px] h-[37px] [background:var(--pragma-arrow-left)_no-repeat_0_0]"></div>
    <div data-carousel-arrow="right" class="absolute cursor-pointer right-0 w-[20px] h-[37px] [background:var(--pragma-arrow-right)_no-repeat_0_0]"></div>
  </div>
</div>
<script>
  function onLoad() {
    const carousels = document.querySelectorAll('[data-carousel]');

    const nextSlide = (content: HTMLElement, silent = false) => {
      const slides = [...content.querySelectorAll('[data-carousel-slide]')] as HTMLElement[];

      slides.forEach((slide, index) => slide.classList.toggle('current', index === currentSlideIndex));
      content.style.transitionProperty =  silent ? 'none' : 'transform';
      content.style.transform = `translateX(calc(-100%*${currentSlideIndex}))`;
    }

    for (const carousel of carousels) {
      const content = carousel.querySelector('[data-carousel-content]') as HTMLElement;
      const auto = (carousel as HTMLElement).hasAttribute('data-carousel-auto');
      const timeout = +((carousel as HTMLElement).dataset?.carouselTimeout ?? 0);
      const slides = [...content.querySelectorAll('[data-carousel-slide]')] as HTMLElement[];

      // Clone first and last slides for seamless looping (executed once)
      const first = slides[0].cloneNode(true) as HTMLElement;
      const last = slides[slides.length - 1].cloneNode(true) as HTMLElement;
      const length = content.querySelectorAll('[data-carousel-slide]').length + 2;
      first.classList.add('clone');
      last.classList.add('clone');
      content.prepend(last);
      content.append(first);

      const isOutOfRange = () => currentSlideIndex < 1 || currentSlideIndex > length - 2;
      const reset = () => {currentSlideIndex = currentSlideIndex === 0 ? length - 2 : 1};

      content.style.transform = 'translateX(-100%)'; // Initial transform

      let intervalId: NodeJS.Timeout|null = auto ? setInterval(() => {
        if (isOutOfRange()) { return; }

        currentSlideIndex++;
        nextSlide(content);
      }, timeout) : null;

      const handleClick = (event: Event) => {
        if(intervalId) {
          clearInterval(intervalId); // disable auto-slide
          intervalId = null;
        }

        const target = event.target as HTMLElement;

        if (!target.hasAttribute('data-carousel-arrow')) { return; }

        const direction = target.dataset.carouselArrow;

        if (isOutOfRange()) { return; }

        currentSlideIndex += direction === 'right' ? 1 : -1;
        nextSlide(content);
      };

      const handleLoop = (_event: Event) => {
        if (!isOutOfRange()) { return; }

        reset();
        nextSlide(content, true);
      };

      carousel.addEventListener('click', handleClick);
      carousel.addEventListener('transitionend', handleLoop);
    }

    let currentSlideIndex = 1; // Initial slide index
  }

  document.addEventListener('astro:page-load', onLoad)
</script>
